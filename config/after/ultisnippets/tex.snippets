# Python global {{{
#------------------------------------------------------------------------------
global !p

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal
## }}}



# Priority 0 {{{
#------------------------------------------------------------------------------
priority 0

snippet ,pac "Package" bA
\\usepackage[${1:options}]{${2:packages}}$0
endsnippet

snippet ,beg "\begin{$} \\ \end{$}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet ,enum "\begin{enumerate} \\ \end{enumerate}" bA
\\begin{enumerate}
	\\item $0
\\end{enumerate}
endsnippet

snippet ,item "\begin{itemize} \\ \end{itemize}" bA
\\begin{itemize}
	\\item $0
\\end{itemize}
endsnippet

snippet ,ss "\smallskip" bA
\\smallskip
$0
endsnippet

snippet ,ms "\medskip" bA
\\medskip
$0
endsnippet

snippet ,bs "\bigskip" bA
\\bigskip
$0
endsnippet

snippet ,ni "\noindent" bA
\\noindent
endsnippet

## }}}


# Priority 10 {{{
#------------------------------------------------------------------------------
priority 10

snippet ... "\ldots" iA
\\ldots
endsnippet

snippet mk "Inline math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Display math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

## }}}


# Priority 100 {{{
#------------------------------------------------------------------------------
priority 100

context "math()"
snippet />a "\Rightarrow" iA
\Rightarrow
endsnippet

context "math()"
snippet /<a "\Leftarrow" iA
\Leftarrow
endsnippet

context "math()"
snippet /<> "\Leftrightarrow" iA
\Leftrightarrow
endsnippet

context "math()"
snippet () "left($right)" iA
\left(${1:${VISUAL}}\right) $0
endsnippet

context "math()"
snippet lr "left($right)" i
\left(${1:${VISUAL}}\right) $0
endsnippet

context "math()"
snippet lr( "left($right)" i
\left(${1:${VISUAL}}\right) $0
endsnippet

context "math()"
snippet lr{ "left\{$right\}" i
\left\\{${1:${VISUAL}}\right\\} $0
endsnippet

context "math()"
snippet lr[ "left[$right]" i
\left[${1:${VISUAL}}\right] $0
endsnippet

context "math()"
snippet lr| "left|$right|" i
\left|${1:${VISUAL}}\right| $0
endsnippet

# }}}


# Priority 200 {{{
#------------------------------------------------------------------------------
priority 200

context "math()"
snippet inn "\in" iA
\in
endsnippet

context "math()"
snippet nin "\not\in" iA
\not\in
endsnippet

context "math()"
snippet ss "\subset" iA
\subset
endsnippet

context "math()"
snippet s/ "\setminus" iA
\setminus
endsnippet

snippet != "\neq" iA
\neq 
endsnippet

snippet <= "\le" iA
\le 
endsnippet

snippet >= "\ge" iA
\ge 
endsnippet

context "math()"
snippet // "\frac{$}{$}" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "\frac{$V}{$}" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet lim "\lim_{}" w
\lim_{${1:n} \to ${2:\infty}}$0 
endsnippet

context "math()"
snippet -> "\to" iA
\to 
endsnippet

context "math()"
snippet <-> "\leftrightarrow" iA
\leftrightarrow
endsnippet
# }}}


# Priority 1000 {{{
#------------------------------------------------------------------------------
priority 1000

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript 2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet bar "\overline{$}" iA
\overline{$1}
endsnippet
# }}}


# Comments (ADVANCED SNIPPETS) {{{ 
# -----------------------------------------------------------------------------
# ADVANCED 

# 4.10 Snippet actions - arbitrary python code can be executes: pre-expend(after trigger condition
# has been matches, but before snippet expansion, post-expand(after expansion,but before
# the first jump), jump - after jump to the next/previous placeholder.

# 4.07 Transformations (like mirrors, but can modify the mathced pattern)

# 4.09 Custom context snippets - can be enabled by 'e' (special conditions or switch)

# 4.4.4 Global snippets - !p and putting them in another file

##}}}


# vim: set foldmethod=marker foldlevel=0:
