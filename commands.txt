:![command]  - execute shell command.
:!![command] - execute command and put its output in the file 

HELP COMMANDS:
	:help [subject]
	:help vimrc-intro
	:help insert-index 
	:help user-manual
	:help deleting
	:help index 
	:help -t

:digraphs - to print character, that can't be printed with keyboard
:digr

:marks                 - check all the marks existed ('-last place of the current file,
                                                      "-the place where you were at the file before closing it 
                                                      [-the start of the last insert 
                                                      ]-the end of the last insert)


HELP PREFIXES
	normal-mode             - (nothing)          - :help x
	control chars           - CTRL               - :help CTRL-u 
	visual-mode             - v                  - :help v_u
	insert-mode             - i                  - :help i_<Esc>
	ex-mode                 - :                  - :help :quit
	command-line editing    - c                  - :help c_<Del>
	Vim command args        -                    - :help -r 
	Options                 - '(both ends)'      - :help 'textwidth'



SET COMMANDS:
	:set (no/incv)number  - set numbering on the left side of the screen
	
	:set ic               - ignore case
	:set noic             - switch off (for many commands)
	:set invic            - to toggle (for many commands)
	:set hls[earch]       - highlight all matching phrases
	:set is               - show partial matches for a search phrase
	:nohlsearch           - clear the current highlighting
	:set incsearch        - the editor starts finding matches when you begin to write
	
	:set autowrite        - write it when you always want to save changes 
	
	:set hidden           - if you want to keep the contents of all your old buffers around while editing 
	
You can write commands using pipe - :set hls is



Работа с файлом:
	:q                    - close the window, discarding changes 
	:q!                   - close the window, without warning
	:qa!                  - close all without warning
	:x! | wq              - save the file
	:vi [file]            - close the current file and begin editing another one 
	:w[rite]              - write the changes 
	:view [file]          - works like vi, but the new file will be opened in read only mode 

	:args                 - show the file you are editing
	




Интересная фича при переключении между файлами:

first start: $ nvim file1.txt file2.txt file3.txt - opens the file1.txt. 

To switch the file print |:next| or |:previous| and save changes (or overload using !)

	1 <C-^>               - open file1.txt					"When first load there is no alternative file before you switch anywhere
	2 <C-^>               - open file2.txt 
	3 <C-^>               - open file3.txt 
	<C-^>                 - open file2.txt (previous(alternative) file)
	
	
	
Перемещение:
	:$                    - goto last line



Редактирование [Commands]:
	:s/old/new            - replaces first match old on new in this line
	:s/old/new/g          - replaces all matches old on new in this line.
	:#,#s/old/new/g       - replaces all matches old on new between #, #.
	:%s/old/new/g         - replaces all matches in this document
	../gc                 - to ask for confirmation after each time.
	
	:r [filename]         - retrieving content of the file where the cursor is.
	:r ![dir]             - reads the output of the dir command and puts it below the cursor position.



Windows:
	:[count] next         - open the file in the list that is next to this one 
	:previous  or Next    - backwards
	:wprevious            - write and previous
	
	:q = :close
	
	:first or rewind      - open first file in the list 
	:last                 - open last file in the list 
	
	
	:split [file]         - split the window and open the file or nothing
	:[number]split ...    - number is a number of lines in a new window 
	
	:[count] split[+command] [file] - this is how split can look like 
	
	:new                  - like split but starts a new file 
	
	:sview                - split a view
	
	:hide                 - close the current window but Vim knows that you are editing this file (hide it from screen)
	


BUFFERS:
	:buffers             - find the information about the current buffers 
	
	:buffer number       - select which buffer to use 
	:buffer file         - same operation but with file name

	:sbuffer number|file - splits the window and starts editing the buffer 
	
	:bnext               - go to the next buffer 
	:count [s]bnext      - go to the next buffer count times or if 's' also split 
	:count [s]bprevious  - go to previous buffer count times or if 's' also split 
	:count [s]bNext      - like [s]bprevious 
	
	:[s]blast            - go to the last buffer or if 's' also split 
	:[s]brewind | :[s]bfirst   - open first buffer 
	:[s]bmodified count  - go to count modified buffer on the list (not number of buffer)
	
flags
	-             - inactive buffer 
	h             - buffer is hidden 
	%             - current buffer 
	#             - alternate buffer 
	+             - file has been modified 
	